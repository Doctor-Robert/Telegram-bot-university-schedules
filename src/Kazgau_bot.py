from datetime import datetime, date
from datetime import timedelta
from datetime import datetime
from bs4 import BeautifulSoup
from telebot import types
import requests
import telebot
import sqlite3
import re
from dotenv import load_dotenv
import os

load_dotenv()
TELEBOT_KEY = os.environ.get("TELEBOT_KEY")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")

bot = telebot.TeleBot(TELEBOT_KEY)

# –ü–∞—Ä—Å–µ—Ä (–ü–∞—Ä—Å–∏—Ç —Å–∞–π—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)
def the_site_parser(link):
    try:
        response = requests.get(link, timeout=10)
        response.encoding = 'utf-8'
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return False
    
    soup = BeautifulSoup(response.text, 'lxml')
    answer = soup.find('div', id= 'schedule')

    if not answer:
        return False

    weekdays = {
        '0': [],        #–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        '1': [],        #–≤—Ç–æ—Ä–Ω–∏–∫
        '2': [],        #—Å—Ä–µ–¥–∞
        '3': [],        #—á–µ—Ç–≤–µ—Ä–≥
        '4': [],        #–ø—è—Ç–Ω–∏—Ü–∞
        '5': []         #—Å—É–±–æ—Ç–∞
    }

    value_user = answer.find_all('div')

    for i in range(4, len(value_user)):
        text = value_user[i].text.strip()

        if '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' in value_user[i].text:
            ready_text = separation_weekday_parser(text)
            weekdays['0'].append(ready_text)
        elif '–í—Ç–æ—Ä–Ω–∏–∫' in value_user[i].text:
            ready_text = separation_weekday_parser(text)
            weekdays['1'].append(ready_text)
        elif '–°—Ä–µ–¥–∞' in value_user[i].text:
            ready_text = separation_weekday_parser(text)
            weekdays['2'].append(ready_text)
        elif '–ß–µ—Ç–≤–µ—Ä–≥' in value_user[i].text:
            ready_text = separation_weekday_parser(text)
            weekdays['3'].append(ready_text)
        elif '–ü—è—Ç–Ω–∏—Ü–∞' in value_user[i].text:
            ready_text = separation_weekday_parser(text)
            weekdays['4'].append(ready_text)
        elif '–°—É–±–±–æ—Ç–∞' in value_user[i].text:
            ready_text = separation_weekday_parser(text)
            weekdays['5'].append(ready_text)
    
    return weekdays

def separation_weekday_parser(weekday):
    weekday_value = ''.join(weekday).split('\n')

    old_time = None
    number = 0
    result = ''

    for lesson in weekday_value:
        time_math = re.search(r'\d{2}:\d{2}-\d{2}:\d{2}', lesson)

        if number != 0:
            result += (f"„Äê{number} –ø–∞—Ä–∞„Äë | {old_time}\n")

        if time_math:
            time = time_math.group()
            separated_lines = re.split(r'(?=–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:|–ê—É–¥–∏—Ç–æ—Ä–∏—è:|\d{2}:\d{2}-\d{2}:\d{2})', lesson)
            if separated_lines:
                if lesson == weekday_value[0]:
                    result += (f"‚≠êÔ∏è {separated_lines[0]}\n\n")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
                    if len(separated_lines) >= 3:
                        result += (f"‚Ä¢ {separated_lines[0]}\n‚Ä¢ {separated_lines[1]}\n‚Ä¢ {separated_lines[2]}\n")
                        result += f"\n"
                    elif len(separated_lines) >= 2:
                        result += (f"‚Ä¢ {separated_lines[0]}\n‚Ä¢ {separated_lines[1]}\n")
                        result += f"\n"
                    else:
                        result += (f"‚Ä¢ {separated_lines[0]}\n")
                        result += f"\n"
        else:
            separated_lines = re.split(r'(?=–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:|–ê—É–¥–∏—Ç–æ—Ä–∏—è:)', lesson)
            if separated_lines:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞
                if len(separated_lines) >= 3:
                    result += (f"‚Ä¢ {separated_lines[0]}\n‚Ä¢ {separated_lines[1]}\n‚Ä¢ {separated_lines[2]}\n")
                elif len(separated_lines) >= 2:
                    result += (f"‚Ä¢ {separated_lines[0]}\n‚Ä¢ {separated_lines[1]}\n")
                else:
                    result += (f"‚Ä¢ {separated_lines[0]}\n")
        
        old_time = time
        number += 1

    return result

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("Kazgau.db")
    cur = conn.cursor()

    cur.execute('''
        CREATE TABLE IF NOT EXISTS users(
            user_id INTEGER PRIMARY KEY,
            nickname TEXT,
            group_name TEXT DEFAULT '',
            user_admin TEXT DEFAULT 'no'
            )
    ''')
    conn.commit()
    conn.close()
init_db()

# –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_status = {}
# –°—á–µ—Ç—á–∏–∫–∏
today_weekday_counter = 0   # –°—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
next_week = False           # –§–ª–∞–≥, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å –∫–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –Ω–µ–¥–µ–ª—è
weekdays = []               # –°–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
today_weekday = 0           # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
delete_message_id = None    # id —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å




# –¢–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç
@bot.message_handler(commands=['start','help'])
def start_handler(message):
    global today_weekday_counter
    global delete_message_id

    user_id = message.from_user.id
    nickname = message.from_user.username
    group_name = get_group(user_id)
    
    if message.text == '/start':
        today_weekday_counter = 0
        if group_name and group_name != '':
            kb = main_menu_buttom()
            text = f"üëã –ü—Ä–∏–≤–µ—Ç!\n\nüìä –¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {group_name}\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ: üëá"

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if delete_message_id != None:
                bot.delete_messages(message.chat.id, [delete_message_id, delete_message_id - 1])
            
            sent_message = bot.send_message(message.chat.id, text, reply_markup=kb)
            delete_message_id = sent_message.message_id
        else:
            text = 'üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ö–∞–∑–ì–ê–£!\n\nüìå –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É\n\n–ü—Ä–∏–º–µ—Ä: A123-45' 
            bot.send_message(message.chat.id, text)

            user_status[user_id] = 'waiting_for_group_input'
            add_user(user_id, nickname)
    elif message.text == '/help':
        text = 'üÜò –¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–±–ª–µ–º–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admgrz\n\n‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫—É "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", –Ω–æ —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:\n\n1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã\n2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n3. –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é\n\n–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! ü§ù'
        bot.send_message(message.chat.id, text)

# –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
@bot.message_handler(func=lambda message: user_status.get(message.from_user.id) in ['waiting_for_group_input', 'waiting_password', 'waiting_group_name'])
def find_user_group(message):
    user_id = message.from_user.id
    message_chat_id = message.chat.id

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ –µ–µ –ø—Ä–æ–≤–µ—Ä–∫–∞
    if user_status.get(user_id) == 'waiting_for_group_input':
        group_name = message.text
        check_and_add_user_group(user_id, group_name, message_chat_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è(–∞–¥–º–∏–Ω–∫–∞)
    elif user_status.get(user_id) == 'waiting_password':
        if message.text == ADMIN_PASSWORD:
            update_user_admin(user_id)

            text = "‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω\n\n–¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\nüõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/show_users - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n/show_group_users - –ø–æ –≥—Ä—É–ø–ø–µ"
            bot.send_message(message.chat.id, text)
        else:
            text = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω\n\n–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
            bot.send_message(message.chat.id, text)

        user_status[user_id] = None

    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã
    elif user_status.get(user_id) == 'waiting_group_name':
        group_name = message.text.upper()
        users = get_all_users_from_one_group(group_name)
        response = f"üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≥—Ä—É–ø–ø—ã {group_name}:\n\n"
        for user in users:
            response += f"üë§ @{user['nickname'] or '–Ω–µ—Ç'}, {user['group_name'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}, {user['user_admin']}\n" 
        
        try:
            bot.send_message(message.chat.id, response)
        except Exception as e:
            bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ")

        user_status[user_id] = None

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ –ø–æ–º–æ—â—å
@bot.callback_query_handler(func=lambda callback: callback.data in ['change_the_group', 'help'])
def change_group(callback):
    user_id = callback.from_user.id

    try:
        bot.answer_callback_query(callback.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    if callback.data == 'change_the_group':
        user_status[user_id] = 'waiting_for_group_input'
        add_group(user_id, '')

        text = 'üîÑ –°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:\n\n–ü—Ä–∏–º–µ—Ä: –ê123-45'
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=text)

    # –ü–æ–º–æ—â—å
    elif callback.data == 'help':
        kb = back_to_main_menu()
        text = 'üÜò –¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–±–ª–µ–º–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admgrz\n\n–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! ü§ù'
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=text, reply_markup=kb)

# –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@bot.callback_query_handler(func=lambda callback: callback.data in ['schedule', 'forward', 'back', 'main_menu','next_week','last_week'])
def check_schedule(callback):
    global today_weekday_counter
    global next_week
    global weekdays
    global today_weekday

    try:
        bot.answer_callback_query(callback.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")

    user_id = callback.from_user.id
    group_name = get_group(user_id)

    # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if callback.data == 'schedule':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        today_day, today_weekday = check_sunday()

        # –ü–∞—Ä—Å–µ—Ä
        link = f"https://kazgau.ru/obrazovanie/raspisanie-zanyatij/?filter=group&item={group_name}&date={today_day}"
        if find_no_schedule_for_week(link):

            weekdays = the_site_parser(link)

            if not weekdays:
                bot.send_message(callback.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∞–π—Ç\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
                return
        else:
            kb = back_to_main_menu()
            text = "üìÖ –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=text, reply_markup=kb)
            return

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if callback.data == 'main_menu':
        text = f"üëã –ü—Ä–∏–≤–µ—Ç!\n\nüìä –¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {group_name}\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ: üëá"
        kb = main_menu_buttom()
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=text, reply_markup=kb)
        today_weekday_counter = 0
        next_week = False
        return

    # –ö–Ω–æ–ø–∫–∏ –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥
    if callback.data == 'forward':
        today_weekday_counter += 1
    elif callback.data == 'back':
        today_weekday_counter -= 1

    # –ö–Ω–æ–ø–∫–∏ –ü—Ä–æ—à–ª–∞—è/–°–ª—É–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è
    if callback.data == 'next_week':

        # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–¥–µ–ª–∏
        today_day, today_weekday = check_sunday()
        counter = 7 - today_weekday
        today_day = today_day + timedelta(counter)
        link = f"https://kazgau.ru/obrazovanie/raspisanie-zanyatij/?filter=group&item={group_name}&date={today_day}"

        if find_no_schedule_for_week(link):
            weekdays = the_site_parser(link)

            next_week = True
            today_weekday = 0
            today_weekday_counter = 0
        else:
            kb = last_week_and_main_menu_buttom()
            text = "üìÖ –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=text, reply_markup=kb)
            return

    elif callback.data == 'last_week':
        today_weekday = datetime.today().weekday()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        if today_weekday == 6:
            today_day = date.today() + timedelta(1)
        else:
            today_day = date.today()

        link = f"https://kazgau.ru/obrazovanie/raspisanie-zanyatij/?filter=group&item={group_name}&date={today_day}"
        weekdays = the_site_parser(link)

        next_week = False
        today_weekday = 0
        today_weekday_counter = 5

    show_weekday = today_weekday + today_weekday_counter


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    kb = check_keyboard(show_weekday)

    if not weekdays[str(show_weekday)]:
        text = "üì≠ –ü–∞—Ä –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç\n\n–ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å! üéâ"
    else:
        text = weekdays[str(show_weekday)]
        
    try:
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=text, reply_markup=kb)
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        if "message is not modified" not in str(e):
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ê–¥–º–∏–Ω–∫–∞
@bot.message_handler(commands=['admin', 'show_users', 'show_group_users'])
def admin_handler(message):
    user_id = message.from_user.id
    status_admin = get_user_admin(user_id)

    # –ö–æ–º–∞–Ω–¥–∞ /admin
    if message.text == '/admin':
        if status_admin == 'no':
            user_status[user_id] = 'waiting_password'
            bot.send_message(message.chat.id, 'üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å\n\n–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
        elif status_admin == 'yes':
            text = "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ /show_users - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n‚Ä¢ /show_group_users - –ø–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–µ"
            bot.send_message(message.chat.id, text)
    
    # –ö–æ–º–∞–Ω–¥–∞ /show_users
    elif message.text == '/show_users' and status_admin == 'yes':
        users = get_all_users()
        response = f"üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Å–µ–≥–æ: {len(users)}):\n\n"

        for user in users:
            response += f"üë§@{user['nickname'] or '–Ω–µ—Ç'}, {user['group_name'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}, {user['user_admin']}\n"
        
        try:
            bot.send_message(message.chat.id, response)
        except Exception as e:
            bot.send_message(message.chat.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = {len(users)}")

    # –ö–æ–º–∞–Ω–¥–∞ /show_group_users
    elif message.text == '/show_group_users' and status_admin == 'yes':
        user_status[user_id] = 'waiting_group_name'
        text = "üë• –ü–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–µ\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n–ü—Ä–∏–º–µ—Ä: A123-45"
        bot.send_message(message.chat.id, text)




# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–∑–æ–≤–∞ –∫–Ω–æ–ø–æ–∫
# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_buttom():
    kb = types.InlineKeyboardMarkup()
    btm1 = types.InlineKeyboardButton(text="üéì –†–ê–°–ü–ò–°–ê–ù–ò–ï", callback_data= "schedule")
    btm2 = types.InlineKeyboardButton(text="üîÑ –°–ú–ï–ù–ò–¢–¨ –ì–†–£–ü–ü–£", callback_data= "change_the_group")
    btm3 = types.InlineKeyboardButton(text="‚ùì –ü–û–ú–û–©–¨", callback_data= "help")
    kb.add(btm1)
    kb.add(btm2, btm3)
    return kb

# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –∫–Ω–æ–ø–æ–∫ –≤–ø–µ—Ä–µ–¥ –Ω–∞–∑–∞–¥ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
def forward_backward_buttom():
    kb = types.InlineKeyboardMarkup(row_width=3)
    btm1 = types.InlineKeyboardButton(text="‚ñ∂Ô∏è –í–ü–ï–†–ï–î", callback_data= "forward")
    btm2 = types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data= "back")
    btm3 = types.InlineKeyboardButton(text="üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data= "main_menu")
    kb.add(btm2, btm1)
    kb.add(btm3)
    return kb

def backward_buttom():
    kb = types.InlineKeyboardMarkup()
    btm2 = types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data= "back")
    btm3 = types.InlineKeyboardButton(text="üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data= "main_menu")
    kb.add(btm2)
    kb.add(btm3)
    return kb

def forward_buttom():
    kb = types.InlineKeyboardMarkup()
    btm2 = types.InlineKeyboardButton(text="‚ñ∂Ô∏è –í–ü–ï–†–ï–î", callback_data= "forward")
    btm3 = types.InlineKeyboardButton(text="üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data= "main_menu")
    kb.add(btm2)
    kb.add(btm3)
    return kb

def backward_and_next_week_buttom():
    kb = types.InlineKeyboardMarkup()
    btm2 = types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–ê–ó–ê–î", callback_data= "back")
    btm1 = types.InlineKeyboardButton(text="üìÖ –°–õ–ï–î. –ù–ï–î–ï–õ–Ø", callback_data= "next_week")
    btm3 = types.InlineKeyboardButton(text="üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data= "main_menu")
    kb.add(btm2,btm1)
    kb.add(btm3)
    return kb

def forward_and_last_week_buttom():
    kb = types.InlineKeyboardMarkup()
    btm2 = types.InlineKeyboardButton(text="‚ñ∂Ô∏è –í–ü–ï–†–ï–î", callback_data= "forward")
    btm1 = types.InlineKeyboardButton(text="üìÖ –ü–†–ï–î. –ù–ï–î–ï–õ–Ø", callback_data= "last_week")
    btm3 = types.InlineKeyboardButton(text="üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data= "main_menu")
    kb.add(btm1,btm2)
    kb.add(btm3)
    return kb

def last_week_and_main_menu_buttom():
    kb = types.InlineKeyboardMarkup()
    btm1 = types.InlineKeyboardButton(text="üìÖ –ü–†–ï–î. –ù–ï–î–ï–õ–Ø", callback_data= "last_week")
    btm3 = types.InlineKeyboardButton(text="üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data= "main_menu")
    kb.add(btm1)
    kb.add(btm3)
    return kb

# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
def back_to_main_menu():
    kb = types.InlineKeyboardMarkup()
    btm1 = types.InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data= "main_menu")
    kb.add(btm1)
    return kb



# –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('Kazgau.db')
    conn.row_factory = sqlite3.Row
    return conn

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö
def add_user(user_id, nickname):
    conn = get_db_connection()
    cur = conn.cursor()

    cur.execute(
        'INSERT OR IGNORE INTO users (user_id, nickname) VALUES (?, ?)',
        (user_id, nickname)
    )
    conn.commit()
    conn.close()

def add_group(user_id, group_name):
    conn = get_db_connection()
    cur = conn.cursor()

    cur.execute(
        'UPDATE users SET group_name = ? WHERE user_id = ?',
        (group_name, user_id)
    )
    conn.commit()
    conn.close()

def update_user_admin(user_id):
    conn = get_db_connection()
    cur = conn.cursor()

    cur.execute(
        'UPDATE users SET user_admin = ? WHERE user_id = ?',
        ('yes', user_id)
    )
    conn.commit()
    conn.close()

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö
def get_group(user_id):
    conn = get_db_connection()
    cur = conn.cursor()

    cur.execute(
        'SELECT group_name FROM users WHERE user_id = ?',
        (user_id,)
    )
    result = cur.fetchone()
    conn.close()
    if result:
        return result['group_name']
    return ''

def get_user_admin(user_id):
    conn = get_db_connection()
    cur = conn.cursor()

    cur.execute(
        'SELECT user_admin FROM users WHERE user_id = ?',
        (user_id,)
    )
    result = cur.fetchone()
    conn.close()

    return result['user_admin']

def get_all_users():
    conn = get_db_connection()
    cur = conn.cursor()

    cur.execute(
        'SELECT * FROM users',
    )
    result = cur.fetchall()
    conn.close()

    return result

def get_all_users_from_one_group(group_name):
    conn = get_db_connection()
    cur = conn.cursor()

    cur.execute(
        'SELECT * FROM users WHERE group_name = ?',
        (group_name,)
    )
    result = cur.fetchall()
    conn.close()

    return result




# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –∏ –µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
def check_and_add_user_group(user_id, group_name, message_chat_id):
    global delete_message_id

    today_weekday = datetime.today().weekday()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    if today_weekday in [5, 6]:
        today_day = date.today()
        count_for_next_week = 7 - today_weekday
        day = today_day + timedelta(days=count_for_next_week)

        link = f'https://kazgau.ru/obrazovanie/raspisanie-zanyatij/?filter=group&item={group_name}&date={day}'
    else:
        link = f'https://kazgau.ru/obrazovanie/raspisanie-zanyatij/?filter=group&item={group_name}'
    
    response = requests.get(link)

    # –ü–æ–∏—Å–∫ —Å–µ–≥–æ–¥–Ω–µ—à–Ω–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'lxml')
        schedule = (soup.find('div', id= 'schedule')).text
        
        if not '–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é' in schedule:
            add_group(user_id, group_name.upper())
            user_status[user_id] = None

            kb = main_menu_buttom()

            text = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n‚Ä¢ –ì—Ä—É–ø–ø–∞: {group_name.upper()}\n‚Ä¢ –°—Ç–∞—Ç—É—Å: üéâ –î–æ–±–∞–≤–ª–µ–Ω–∞\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!"
            sent_message = bot.send_message(message_chat_id, text, reply_markup=kb, parse_mode='Markdown')
            delete_message_id = sent_message.message_id
        else:
            text = f'‚ùå –ì—Ä—É–ø–ø–∞ {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n‚Ä¢ –§–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê123-45)\n‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help:'
            bot.send_message(message_chat_id, text)
    else:
        text = "üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n\n–°–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
        bot.send_message(message_chat_id, text)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
def check_keyboard(today_weekday):
    if next_week:
        if today_weekday == 0:
                kb = forward_and_last_week_buttom()
        elif today_weekday == 5:
            kb = backward_buttom()
        else:
            kb = forward_backward_buttom()
    else:
        if today_weekday == 0:
            kb = forward_buttom()
        elif today_weekday == 5:
            kb = backward_and_next_week_buttom()
        else:
            kb = forward_backward_buttom()
    return kb  

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
def check_sunday():
    if datetime.today().weekday() == 6:
        today_day = date.today() + timedelta(1)
        today_weekday = 0
    else:
        today_day = date.today()
        today_weekday = datetime.today().weekday()
    return today_day, today_weekday

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é –Ω–µ–¥–µ–ª—é
def find_no_schedule_for_week(link):
    response = requests.get(link)
    flag = True

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'lxml')
        schedule = (soup.find('div', id= 'schedule')).text
        
        if '–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é' in schedule:
            flag = False

    else:
        flag = False
    return flag

bot.polling()
