from all_function import parser_function, buttoms_functions, bd_functions
from datetime import datetime, date, timedelta
import telebot
import threading

from dotenv import load_dotenv
import os

load_dotenv()
TELEBOT_KEY = os.environ.get("TELEBOT_KEY")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")

bd_functions.init_db()
bot = telebot.TeleBot(TELEBOT_KEY)


@bot.message_handler(commands=["start", "help"])
def start_handler(message):

    user_id, nickname = message.from_user.id, message.from_user.username
    # bd_functions.add_user(user_id, nickname)

    if message.text == "/start":

        bd_functions.add_today_weekday_counter(user_id, 0)
        group_name = bd_functions.get_group_name(user_id)

        if group_name and group_name != "":
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            delete_message_id = bd_functions.get_delete_message_id(user_id)
            if delete_message_id != None:
                bot.delete_messages(
                    message.chat.id, [delete_message_id, delete_message_id - 1]
                )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            text = f"""
üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>

üìä –¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {group_name}

<i>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ: üëá</i>
"""
            sent_message = bot.send_message(
                message.chat.id, text, reply_markup=buttoms_functions.main_menu_buttom(), parse_mode='HTML'
            )

            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ id —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bd_functions.add_delete_message_id(user_id, sent_message.message_id)
        else:
            text = "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ö–∞–∑–ì–ê–£!\n\nüìå –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É\n\n–ü—Ä–∏–º–µ—Ä: A123-45"
            bot.send_message(message.chat.id, text)

            bd_functions.add_user(user_id, nickname)
            bd_functions.add_data_of_reg(user_id, date.today())
            bd_functions.add_message_chat_id(user_id, message.chat.id)
            bd_functions.add_user_status(user_id, "waiting_for_group_input")

    elif message.text == "/help":
        text = 'üÜò –¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–±–ª–µ–º–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admgrz\n\n‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫—É "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", –Ω–æ —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:\n\n1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã\n2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n3. –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é\n\n–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! ü§ù'
        bot.send_message(message.chat.id, text)

@bot.message_handler(
    func=lambda message: bd_functions.get_user_status(message.from_user.id)
    in ["waiting_for_group_input", "waiting_password", "waiting_group_name"]
)
def find_user_group(message):
    user_id = message.from_user.id
    message_chat_id = message.chat.id

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ –µ–µ –ø—Ä–æ–≤–µ—Ä–∫–∞
    if bd_functions.get_user_status(user_id) == "waiting_for_group_input":
        group_name = message.text
        parser_function.check_and_add_user_group(user_id, group_name, message_chat_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è(–∞–¥–º–∏–Ω–∫–∞)
    elif bd_functions.get_user_status(user_id) == "waiting_password":
        if message.text == ADMIN_PASSWORD:
            bd_functions.add_user_admin(user_id)

            bot.send_message(
                message.chat.id,
                text="‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω\n\n–¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\nüõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/show_users - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n/show_group_users - –ø–æ –≥—Ä—É–ø–ø–µ",
            )
        else:
            bot.send_message(
                message.chat.id, text="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω\n\n–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
            )

        bd_functions.add_user_status(user_id, "None")

    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã
    elif bd_functions.get_user_status(user_id) == "waiting_group_name":
        group_name = message.text.upper()
        users = bd_functions.get_all_users_from_one_group(group_name)
        response = f"üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≥—Ä—É–ø–ø—ã {group_name}:\n\n"
        for user in users:
            response += f"üë§ @{user['nickname'] or '–Ω–µ—Ç'}, {user['group_name'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}, {user['user_admin']}\n"

        try:
            bot.send_message(message.chat.id, response)
        except Exception as e:
            bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ")

        bd_functions.add_user_status(user_id, "None")

@bot.callback_query_handler(func=lambda callback: callback.data in ['change_the_group', 'settings', 'daily_notification', 'weekly_schedule', 'profile'])
def change_group(callback):
    user_id = callback.from_user.id

    try:
        bot.answer_callback_query(callback.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")
    
    if callback.data == 'profile':
        group_name = bd_functions.get_group_name(user_id)
        notification_status = bd_functions.get_flag_daily_notification(user_id)
        registration_date = bd_functions.get_data_of_reg(user_id)
        if notification_status == '–í–∫–ª—é—á–µ–Ω ‚úÖ':
            notification_status = "‚úÖ –í–ö–õ–Æ–ß–ï–ù–´"
            notification_icon = "üîî"
        else:
            notification_status = "‚ùå –í–´–ö–õ–Æ–ß–ï–ù–´" 
            notification_icon = "üîï"
        text = f"""
üë§ <b>–ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>üìã –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>
‚îú <b>üìå–ì—Ä—É–ø–ø–∞:</b> <code>{group_name or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}</code>
‚îú {notification_icon} <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {notification_status}
‚îî üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> <code>{registration_date or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>

<b>üöÄ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û</b>
‚ï∞ üåü –§—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° –ï—Å—Ç—å –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é? 
üìß @admgrz
    """
        kb = buttoms_functions.profile_buttom()
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=text, reply_markup=kb, parse_mode='HTML')



    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    if callback.data == 'change_the_group':
        bd_functions.add_user_status(user_id, 'waiting_for_group_input')
        bd_functions.add_group_name(user_id, '')

        text = 'üîÑ –°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:\n\n–ü—Ä–∏–º–µ—Ä: –ê123-45'
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=text)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    elif callback.data in ['settings', 'daily_notification', 'weekly_schedule']:
        if callback.data == 'daily_notification':
            if bd_functions.get_flag_daily_notification(user_id) == '–í—ã–∫–ª—é—á–µ–Ω ‚ùå':
                bd_functions.add_flag_daily_notification(user_id, '–í–∫–ª—é—á–µ–Ω ‚úÖ')
            else:
                bd_functions.add_flag_daily_notification(user_id, '–í—ã–∫–ª—é—á–µ–Ω ‚ùå')

        if callback.data == 'weekly_schedule':
                if bd_functions.get_flag_weekly_schedule(user_id) == '–í—ã–∫–ª—é—á–µ–Ω ‚ùå':
                    bd_functions.add_flag_weekly_schedule(user_id, '–í–∫–ª—é—á–µ–Ω ‚úÖ')
                else:
                    bd_functions.add_flag_weekly_schedule(user_id, '–í—ã–∫–ª—é—á–µ–Ω ‚ùå')

        flag_daily_notification = bd_functions.get_flag_daily_notification(user_id)
        flag_weekly_schedule = bd_functions.get_flag_weekly_schedule(user_id)

        kb = buttoms_functions.settings_buttom()
        if "–í–∫–ª—é—á–µ–Ω" in flag_daily_notification:
            daily_icon = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã"
        else:
            daily_icon = "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
        if "–í–∫–ª—é—á–µ–Ω" in flag_weekly_schedule:
            weekly_icon = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ"
        else:
            weekly_icon = "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"

        text = f"""
<b>‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>üîî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>
{daily_icon}

<b>üìÖ –ù–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>
{weekly_icon}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
<b>üÜò –ü–û–ú–û–©–¨ –ò –ü–û–î–î–ï–†–ñ–ö–ê</b>
–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: 
üëâ @admgrz
"""
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=text, reply_markup=kb, parse_mode='HTML')

@bot.callback_query_handler(func=lambda callback: callback.data in ['schedule', 'forward', 'back', 'main_menu','next_week','last_week'])
def check_schedule(callback):
    weekdays = None

    try:
        bot.answer_callback_query(callback.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")

    user_id = callback.from_user.id
    group_name = bd_functions.get_group_name(user_id)

    # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if callback.data == 'schedule':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        today_day, today_weekday = parser_function.check_sunday()
        bd_functions.add_today_weekday(user_id, today_weekday)

        # –ü–∞—Ä—Å–µ—Ä
        link = f"https://kazgau.ru/obrazovanie/raspisanie-zanyatij/?filter=group&item={group_name}&date={today_day}"
        
        if parser_function.find_no_schedule_for_week(link):

            weekdays = parser_function.the_site_parser(link)
            bd_functions.ensure_schedule_record_exists(user_id)
            bd_functions.add_all_schedule(user_id, weekdays)

            if not weekdays:
                bot.send_message(callback.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∞–π—Ç\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
                return
        else:
            kb = buttoms_functions.back_to_main_menu()
            text = "üìÖ –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=text, reply_markup=kb)
            return

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if callback.data == 'main_menu':
        text = f"""
üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>

üìä –¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {group_name}

<i>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ: üëá</i>
"""
        kb = buttoms_functions.main_menu_buttom()
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=text, reply_markup=kb, parse_mode='HTML')
        bd_functions.add_today_weekday_counter(user_id, 0)
        bd_functions.add_next_week(user_id, 'False')
        return

    # –ö–Ω–æ–ø–∫–∏ –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥
    if callback.data == 'forward':
        counter = bd_functions.get_today_weekday_counter(user_id) + 1
        bd_functions.add_today_weekday_counter(user_id, counter)
    elif callback.data == 'back':
        counter = bd_functions.get_today_weekday_counter(user_id) - 1
        bd_functions.add_today_weekday_counter(user_id, counter)

    # –ö–Ω–æ–ø–∫–∏ –ü—Ä–æ—à–ª–∞—è/–°–ª—É–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è
    if callback.data == 'next_week':

        # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–¥–µ–ª–∏
        today_day, today_weekday = parser_function.check_sunday()
        counter = 7 - today_weekday
        today_day = today_day + timedelta(counter)
        link = f"https://kazgau.ru/obrazovanie/raspisanie-zanyatij/?filter=group&item={group_name}&date={today_day}"

        if parser_function.find_no_schedule_for_week(link):
            weekdays = parser_function.the_site_parser(link)
            bd_functions.add_all_schedule(user_id, weekdays)

            bd_functions.add_next_week(user_id, 'True')
            bd_functions.add_today_weekday(user_id, 0)
            bd_functions.add_today_weekday_counter(user_id, 0)
        else:
            kb = buttoms_functions.last_week_and_main_menu_buttom()
            text = "üìÖ –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=text, reply_markup=kb)
            return

    elif callback.data == 'last_week':
        today_weekday = datetime.today().weekday()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        if today_weekday == 6:
            today_day = date.today() + timedelta(1)
        else:
            today_day = date.today()

        link = f"https://kazgau.ru/obrazovanie/raspisanie-zanyatij/?filter=group&item={group_name}&date={today_day}"
        weekdays = parser_function.the_site_parser(link)
        bd_functions.add_all_schedule(user_id, weekdays)

        bd_functions.add_next_week(user_id, "False")
        bd_functions.add_today_weekday(user_id, 0)
        bd_functions.add_today_weekday_counter(user_id, 5)

    if weekdays is None:
        weekdays = bd_functions.get_all_schedule(user_id)

    #–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º
    if bd_functions.get_flag_weekly_schedule(user_id) == '–í—ã–∫–ª—é—á–µ–Ω ‚ùå':
        show_weekday = bd_functions.get_today_weekday(user_id) + bd_functions.get_today_weekday_counter(user_id)


        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        kb = buttoms_functions.check_keyboard(show_weekday)

        # –ü–†–û–í–ï–†–Ø–ï–ú, —á—Ç–æ weekdays –Ω–µ None –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–π –∫–ª—é—á
        if weekdays is None or str(show_weekday) not in weekdays or not weekdays[str(show_weekday)]:
            bd_functions.ensure_schedule_record_exists(user_id)
            text = "üì≠ –ü–∞—Ä –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç\n\n–ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å! üéâ"
        else:
            bd_functions.ensure_schedule_record_exists(user_id)
            text = bd_functions.get_true_day(show_weekday, user_id)
    #–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
    else:
        text = "üéØ **–†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –ù–ï–î–ï–õ–Æ**\n\n"
        
        day_names = {
            '0': 'üìã –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', 
            '1': 'üìã –í–¢–û–†–ù–ò–ö', 
            '2': 'üìã –°–†–ï–î–ê', 
            '3': 'üìã –ß–ï–¢–í–ï–†–ì', 
            '4': 'üìã –ü–Ø–¢–ù–ò–¶–ê', 
            '5': 'üìã –°–£–ë–ë–û–¢–ê'
        }
        
        for i, (day_num, day_name) in enumerate(day_names.items()):
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –¥–Ω—è–º–∏
            if i > 0:
                text += "‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n\n"
            
            text += f"**{day_name}**\n"
            
            if day_num in weekdays and weekdays[day_num]:
                day_text = str(weekdays[day_num][0]).strip("[]'")
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –∏ –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
                lines = day_text.split('\n')
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –∏ –¥–∞—Ç–∞)
                if lines and '‚≠êÔ∏è' in lines[0]:
                    lines = lines[1:]
                day_text_clean = '\n'.join(lines)
                text += f"{day_text_clean}\n"
            else:
                text += "    üéâ –í—ã—Ö–æ–¥–Ω–æ–π - –ø–∞—Ä –Ω–µ—Ç!\n"

        if bd_functions.get_next_week(user_id) == 'False':
            kb = buttoms_functions.next_week_and_main_menu()
        else:
            kb = buttoms_functions.last_week_and_main_menu_buttom()

    try:
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=text, reply_markup=kb, parse_mode='Markdown')
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        if "message is not modified" not in str(e):
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@bot.message_handler(commands=['admin', 'show_users', 'show_group_users'])
def admin_handler(message):
    user_id = message.from_user.id
    status_admin = bd_functions.get_user_admin(user_id)

    # –ö–æ–º–∞–Ω–¥–∞ /admin
    if message.text == '/admin':
        if status_admin == 'no':
            bd_functions.add_user_status(user_id, 'waiting_password')
            bot.send_message(message.chat.id, 'üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å\n\n–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
        elif status_admin == 'yes':
            text = "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ /show_users - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n‚Ä¢ /show_group_users - –ø–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–µ"
            bot.send_message(message.chat.id, text)
    
    # –ö–æ–º–∞–Ω–¥–∞ /show_users
    elif message.text == '/show_users' and status_admin == 'yes':
        users = bd_functions.get_all_users()
        response = f"üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Å–µ–≥–æ: {len(users)}):\n\n"

        for user in users:
            response += f"üë§@{user['nickname'] or '–Ω–µ—Ç'}, {user['group_name'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}, {user['user_admin']}\n"
        
        try:
            bot.send_message(message.chat.id, response)
        except Exception as e:
            bot.send_message(message.chat.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = {len(users)}")

    # –ö–æ–º–∞–Ω–¥–∞ /show_group_users
    elif message.text == '/show_group_users' and status_admin == 'yes':
        bd_functions.add_user_status(user_id, 'waiting_group_name')
        text = "üë• –ü–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–µ\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n–ü—Ä–∏–º–µ—Ä: A123-45"
        bot.send_message(message.chat.id, text)

greeting_thread = threading.Thread(target=parser_function.daily_greating)
greeting_thread.daemon = True
greeting_thread.start()

bot.polling()
