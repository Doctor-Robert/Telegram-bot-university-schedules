from all_function import bd_functions, buttoms_functions
from datetime import datetime, date, timedelta
from bs4 import BeautifulSoup
import time
import requests
import telebot
import re

from dotenv import load_dotenv
import os

load_dotenv()
TELEBOT_KEY = os.environ.get("TELEBOT_KEY")
bot = telebot.TeleBot(TELEBOT_KEY)


# –ü–∞—Ä—Å–µ—Ä (–ü–∞—Ä—Å–∏—Ç —Å–∞–π—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)
def the_site_parser(link):
    try:
        response = requests.get(link, timeout=10)
        response.encoding = "utf-8"
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return False

    soup = BeautifulSoup(response.text, "lxml")
    answer = soup.find("div", id="schedule")

    if not answer:
        return False

    weekdays = {
        "0": [],  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        "1": [],  # –≤—Ç–æ—Ä–Ω–∏–∫
        "2": [],  # —Å—Ä–µ–¥–∞
        "3": [],  # —á–µ—Ç–≤–µ—Ä–≥
        "4": [],  # –ø—è—Ç–Ω–∏—Ü–∞
        "5": [],  # —Å—É–±–æ—Ç–∞
    }

    value_user = answer.find_all("div")

    for i in range(4, len(value_user)):
        text = value_user[i].text.strip()

        if "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" in value_user[i].text:
            ready_text = separation_weekday_parser(text)
            weekdays["0"].append(ready_text)
        elif "–í—Ç–æ—Ä–Ω–∏–∫" in value_user[i].text:
            ready_text = separation_weekday_parser(text)
            weekdays["1"].append(ready_text)
        elif "–°—Ä–µ–¥–∞" in value_user[i].text:
            ready_text = separation_weekday_parser(text)
            weekdays["2"].append(ready_text)
        elif "–ß–µ—Ç–≤–µ—Ä–≥" in value_user[i].text:
            ready_text = separation_weekday_parser(text)
            weekdays["3"].append(ready_text)
        elif "–ü—è—Ç–Ω–∏—Ü–∞" in value_user[i].text:
            ready_text = separation_weekday_parser(text)
            weekdays["4"].append(ready_text)
        elif "–°—É–±–±–æ—Ç–∞" in value_user[i].text:
            ready_text = separation_weekday_parser(text)
            weekdays["5"].append(ready_text)

    return weekdays


def separation_weekday_parser(weekday):
    weekday_value = "".join(weekday).split("\n")

    old_time = None
    number = 0
    result = ""

    for lesson in weekday_value:
        time_math = re.search(r"\d{2}:\d{2}-\d{2}:\d{2}", lesson)

        if number != 0:
            result += f"„Äê{number} –ø–∞—Ä–∞„Äë | {old_time}\n"

        if time_math:
            time = time_math.group()
            separated_lines = re.split(
                r"(?=–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:|–ê—É–¥–∏—Ç–æ—Ä–∏—è:|\d{2}:\d{2}-\d{2}:\d{2})", lesson
            )
            if separated_lines:
                if lesson == weekday_value[0]:
                    result += f"‚≠êÔ∏è {separated_lines[0]}\n\n"
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
                    if len(separated_lines) >= 3:
                        result += f"‚Ä¢ {separated_lines[0]}\n‚Ä¢ {separated_lines[1]}\n‚Ä¢ {separated_lines[2]}\n"
                        result += f"\n"
                    elif len(separated_lines) >= 2:
                        result += f"‚Ä¢ {separated_lines[0]}\n‚Ä¢ {separated_lines[1]}\n"
                        result += f"\n"
                    else:
                        result += f"‚Ä¢ {separated_lines[0]}\n"
                        result += f"\n"
        else:
            separated_lines = re.split(r"(?=–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:|–ê—É–¥–∏—Ç–æ—Ä–∏—è:)", lesson)
            if separated_lines:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞
                if len(separated_lines) >= 3:
                    result += f"‚Ä¢ {separated_lines[0]}\n‚Ä¢ {separated_lines[1]}\n‚Ä¢ {separated_lines[2]}\n"
                elif len(separated_lines) >= 2:
                    result += f"‚Ä¢ {separated_lines[0]}\n‚Ä¢ {separated_lines[1]}\n"
                else:
                    result += f"‚Ä¢ {separated_lines[0]}\n"

        old_time = time
        number += 1

    return result


# –î–û–ü —Ñ—É–Ω–∫—Ü–∏–∏
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é –Ω–µ–¥–µ–ª—é
def find_no_schedule_for_week(link):
    response = requests.get(link)
    flag = True

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, "lxml")
        schedule = (soup.find("div", id="schedule")).text

        if "–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é" in schedule:
            flag = False

    else:
        flag = False
    return flag

def check_and_add_user_group(user_id, group_name, message_chat_id):
    
    today_weekday = datetime.today().weekday()
    flag = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏ —Å—É–±–±–æ—Ç–∞
    if today_weekday in [5, 6]:
        today_day = date.today()
        count_for_next_week = 7 - today_weekday
        day = today_day + timedelta(days=count_for_next_week)

        flag = True

        link = f"https://kazgau.ru/obrazovanie/raspisanie-zanyatij/?filter=group&item={group_name}&date={day}"
    else:
        today_day = date.today()
        link = f"https://kazgau.ru/obrazovanie/raspisanie-zanyatij/?filter=group&item={group_name}&date={today_day}"

    response = requests.get(link)

    # –ü–æ–∏—Å–∫ —Å–µ–≥–æ–¥–Ω–µ—à–Ω–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, "lxml")
        schedule = (soup.find("div", id="schedule")).text

        if not "–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é" in schedule:
            bd_functions.add_group_name(user_id, group_name.upper())
            group_name = bd_functions.get_group_name(user_id)
            bd_functions.add_user_status(user_id, "None")

            text = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n‚Ä¢ –ì—Ä—É–ø–ø–∞: {group_name.upper()}\n‚Ä¢ –°—Ç–∞—Ç—É—Å: üéâ –î–æ–±–∞–≤–ª–µ–Ω–∞\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!"
            sent_message = bot.send_message(
                message_chat_id,
                text,
                reply_markup=buttoms_functions.main_menu_buttom(),
                parse_mode="Markdown",
            )

            bd_functions.add_delete_message_id(user_id, sent_message.message_id)
        elif flag == True:
            today_day = date.today()
            link = f"https://kazgau.ru/obrazovanie/raspisanie-zanyatij/?filter=group&item={group_name}&date={today_day}"
            response = requests.get(link)
            
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, "lxml")
                schedule = (soup.find("div", id="schedule")).text

                if not "–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é" in schedule:
                    bd_functions.add_group_name(user_id, group_name.upper())
                    group_name = bd_functions.get_group_name(user_id)
                    bd_functions.add_user_status(user_id, "None")

                    text = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n‚Ä¢ –ì—Ä—É–ø–ø–∞: {group_name.upper()}\n‚Ä¢ –°—Ç–∞—Ç—É—Å: üéâ –î–æ–±–∞–≤–ª–µ–Ω–∞\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!"
                    sent_message = bot.send_message(
                        message_chat_id,
                        text,
                        reply_markup=buttoms_functions.main_menu_buttom(),
                        parse_mode="Markdown",
                    )

                    bd_functions.add_delete_message_id(user_id, sent_message.message_id)
                else:
                    text = f"‚ùå –ì—Ä—É–ø–ø–∞ {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n‚Ä¢ –§–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê123-45)\n‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help:"
                    bot.send_message(message_chat_id, text)
        else:
            text = f"‚ùå –ì—Ä—É–ø–ø–∞ {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n‚Ä¢ –§–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê123-45)\n‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help:"
            bot.send_message(message_chat_id, text)
    else:
        text = (
            "üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n\n–°–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
        )
        bot.send_message(message_chat_id, text)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
def check_sunday():
    if datetime.today().weekday() == 6:
        today_day = date.today() + timedelta(1)
        today_weekday = 0
    else:
        today_day = date.today()
        today_weekday = datetime.today().weekday()
    return today_day, today_weekday


def daily_greating():
    while True:
        current_time = datetime.now().strftime("%H:%M")

        if current_time == "15:00":
            users = bd_functions.get_all_users()

            for user in users:
                user_id = user["user_id"]
                chat_id = bd_functions.get_message_chat_id(user_id)
                group_name = bd_functions.get_group_name(user_id)

                if (
                    chat_id
                    and bd_functions.get_flag_daily_notification(user_id)
                    == "–í–∫–ª—é—á–µ–Ω ‚úÖ" and datetime.today().weekday() != 5
                ):
                    tomorrow_day = date.today() + timedelta(1)
                    if datetime.today().weekday() == 6:
                        tomorrow_weekday = 0
                    else:
                        tomorrow_weekday = datetime.today().weekday() + 1

                    link = f"https://kazgau.ru/obrazovanie/raspisanie-zanyatij/?filter=group&item={group_name}&date={tomorrow_day}"

                    if find_no_schedule_for_week(link):
                        weekdays = the_site_parser(link)

                        if (
                            weekdays is None
                            or str(tomorrow_weekday) not in weekdays
                            or not weekdays[str(tomorrow_weekday)]
                        ):
                            text = "üì≠ –ü–∞—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –Ω–µ—Ç\n\n–ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å! üéâ"
                        elif not weekdays:
                            text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∞–π—Ç\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                        else:
                            text = "üéØ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –ó–ê–í–¢–†–ê\n\n"
                            schedule_list = weekdays.get(str(tomorrow_weekday))
                            text += "\n".join(schedule_list)
                    else:
                        text = "üìÖ –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"

                    try:
                        chat_id = bd_functions.get_message_chat_id(user_id)
                        delete_message_id = bd_functions.get_delete_message_id(user_id)

                        if delete_message_id != None:
                            bot.delete_messages(
                                chat_id, [delete_message_id, delete_message_id - 1]
                            )
                        kb = buttoms_functions.back_to_main_menu()
                        sent_message = bot.send_message(chat_id, text, reply_markup=kb)
                        bd_functions.add_delete_message_id(
                            user_id, sent_message.message_id
                        )
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

            time.sleep(60)

        time.sleep(60)
